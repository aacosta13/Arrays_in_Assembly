     1                                  ;Using C, C++, and Assembly to work with Arrays - Assignment 4
     2                                  ;Control module
     3                                  ;Armando Acosta
     4                                  ;CPSC 240-03
     5                                  
     6                                  ;Assemble: nasm -f elf64 -l conasm.lis -o ctrl.asm control.asm
     7                                  
     8                                  global controlfunc
     9                                  extern fill
    10                                  extern display
    11                                  extern printf
    12                                  extern scanf
    13                                  extern getchar
    14                                  extern sumfunc
    15                                  
    16                                  segment .data
    17 00000000 200A00                  emptyline db " ",10,0
    18 00000003 546869732070726F67-     intro db "This program uses various modules using asm, c, and c++ to store values into an array and add said values to get their sum.",10,0
    18 0000000C 72616D207573657320-
    18 00000015 766172696F7573206D-
    18 0000001E 6F64756C6573207573-
    18 00000027 696E672061736D2C20-
    18 00000030 632C20616E6420632B-
    18 00000039 2B20746F2073746F72-
    18 00000042 652076616C75657320-
    18 0000004B 696E746F20616E2061-
    18 00000054 7272617920616E6420-
    18 0000005D 616464207361696420-
    18 00000066 76616C75657320746F-
    18 0000006F 206765742074686569-
    18 00000078 722073756D2E0A00   
    19 00000080 41726520796F752072-     readyprompt db "Are you ready? Press 'c' to continue or 'x' to exit.",10,0
    19 00000089 656164793F20507265-
    19 00000092 73732027632720746F-
    19 0000009B 20636F6E74696E7565-
    19 000000A4 206F72202778272074-
    19 000000AD 6F20657869742E0A00 
    20 000000B6 417265207468657365-     correctnumbers db "Are these numbers correct? (y/n)",10,0
    20 000000BF 206E756D6265727320-
    20 000000C8 636F72726563743F20-
    20 000000D1 28792F6E290A00     
    21 000000D8 5468652073756D206F-     decimalsum db "The sum of the numbers in decimal format is %ld.",10,0
    21 000000E1 6620746865206E756D-
    21 000000EA 6265727320696E2064-
    21 000000F3 6563696D616C20666F-
    21 000000FC 726D61742069732025-
    21 00000105 6C642E0A00         
    22                                  
    23                                  segment .bss
    24                                  numbers resq 0
    25                                  align 16
    26                                  
    27                                  segment .text
    28                                  controlfunc:
    29 00000000 55                      push rbp
    30 00000001 4889E5                  mov rbp, rsp
    31 00000004 53                      push rbx
    32 00000005 51                      push rcx
    33 00000006 52                      push rdx
    34 00000007 57                      push rdi
    35 00000008 56                      push rsi
    36 00000009 4150                    push r8
    37 0000000B 4151                    push r9
    38 0000000D 4152                    push r10
    39 0000000F 4153                    push r11
    40 00000011 4154                    push r12
    41 00000013 4155                    push r13
    42 00000015 4156                    push r14
    43 00000017 4157                    push r15
    44 00000019 9C                      pushf
    45                                  
    46                                  ;Print empty line for easier visibility
    47 0000001A B800000000              mov rax, 0
    48 0000001F 48BF-                   mov rdi, emptyline
    48 00000021 [0000000000000000] 
    49 00000029 E8(00000000)            call printf
    50                                  
    51                                  ;Introduction
    52 0000002E B800000000              mov rax, 0
    53 00000033 48BF-                   mov rdi, intro
    53 00000035 [0300000000000000] 
    54 0000003D E8(00000000)            call printf
    55                                  
    56                                  ;Ask user if they're ready
    57 00000042 B800000000              mov rax, 0
    58 00000047 48BF-                   mov rdi, readyprompt
    58 00000049 [8000000000000000] 
    59 00000051 E8(00000000)            call printf
    60 00000056 E8(00000000)            call getchar
    61                                  
    62                                  ;Check response
    63                                  responsecheck:
    64 0000005B 4883F863                cmp rax, 'c'
    65 0000005F 7416                    je begin
    66 00000061 4883F878                cmp rax, 'x'
    67 00000065 0F84E0000000            je leave
    68                                  
    69                                  ;If not c or x, keep waiting until proper response
    70 0000006B B800000000              mov rax, 0
    71 00000070 E8(00000000)            call getchar
    72 00000075 EBE4                    jmp responsecheck
    73                                  
    74                                  begin:
    75 00000077 B800000000              mov rax, 0
    76 0000007C 48BF-                   mov rdi, emptyline
    76 0000007E [0000000000000000] 
    77 00000086 E8(00000000)            call printf
    78                                  
    79                                  ;Fill array up here, save size to r14, array to r13
    80                                  fillcall:
    81 0000008B B800000000              mov rax, 0
    82 00000090 48BF-                   mov rdi, numbers
    82 00000092 [0000000000000000] 
    83 0000009A BE00000000              mov rsi, 0
    84 0000009F E8(00000000)            call fill
    85 000000A4 4989C6                  mov r14, rax
    86 000000A7 49BD-                   mov r13, numbers
    86 000000A9 [0000000000000000] 
    87                                  
    88                                  ;Empty lines for visibility
    89 000000B1 B800000000              mov rax, 0
    90 000000B6 48BF-                   mov rdi, emptyline
    90 000000B8 [0000000000000000] 
    91 000000C0 E8(00000000)            call printf
    92                                  
    93 000000C5 B800000000              mov rax, 0
    94 000000CA 48BF-                   mov rdi, emptyline
    94 000000CC [0000000000000000] 
    95 000000D4 E8(00000000)            call printf
    96                                  
    97                                  ;Call display to print out numbers
    98 000000D9 B800000000              mov rax, 0
    99 000000DE 4C89EF                  mov rdi, r13
   100 000000E1 4C89F6                  mov rsi, r14
   101 000000E4 E8(00000000)            call display
   102                                  
   103 000000E9 B800000000              mov rax, 0
   104 000000EE 48BF-                   mov rdi, emptyline
   104 000000F0 [0000000000000000] 
   105 000000F8 E8(00000000)            call printf
   106                                  
   107                                  ;Check if numbers were correctly inputted
   108 000000FD B800000000              mov rax, 0
   109 00000102 48BF-                   mov rdi, correctnumbers
   109 00000104 [B600000000000000] 
   110 0000010C E8(00000000)            call printf
   111                                  
   112 00000111 B800000000              mov rax, 0
   113 00000116 E8(00000000)            call getchar
   114 0000011B 4883F879                cmp rax, 'y'
   115 0000011F 7405                    je continue
   116 00000121 E965FFFFFF              jmp fillcall
   117                                  
   118                                  ;Continue on to sum function
   119                                  continue:
   120 00000126 B800000000              mov rax, 0
   121 0000012B 4C89EF                  mov rdi, r13
   122 0000012E 4C89F6                  mov rsi, r14
   123 00000131 E8(00000000)            call sumfunc
   124                                  
   125                                  ;Display sum
   126 00000136 4989C7                  mov r15, rax
   127 00000139 48BF-                   mov rdi, decimalsum
   127 0000013B [D800000000000000] 
   128 00000143 4C89FE                  mov rsi, r15
   129 00000146 E8(00000000)            call printf
   130                                  
   131                                  leave:
   132 0000014B 4C89F8                  mov rax, r15
   133                                  
   134 0000014E 9D                      popf
   135 0000014F 415F                    pop r15
   136 00000151 415E                    pop r14
   137 00000153 415D                    pop r13
   138 00000155 415C                    pop r12
   139 00000157 415B                    pop r11
   140 00000159 415A                    pop r10
   141 0000015B 4159                    pop r9
   142 0000015D 4158                    pop r8
   143 0000015F 5E                      pop rsi
   144 00000160 5F                      pop rdi
   145 00000161 5A                      pop rdx
   146 00000162 59                      pop rcx
   147 00000163 5B                      pop rbx
   148 00000164 5D                      pop rbp
   149                                  
   150 00000165 C3                      ret
   151                                  
